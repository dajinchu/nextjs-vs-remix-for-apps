import { Dictionary, mapValues, partialRight, pickBy } from "lodash";
import { Dog, Owner } from "./types";

function toSearchParam<T>(params: Dictionary<T>) {
  return new URLSearchParams(
    mapValues(
      pickBy(params, (v) => v !== undefined),
      String
    )
  );
}

/**
 * This could be generated by OpenAPI
 */
export class BackendAPIClient {
  host: string;
  constructor(host: string) {
    this.host = host;
  }
  async getDogs(
    offset: number,
    { ownerId }: { ownerId?: number }
  ): Promise<Dog[]> {
    return fetch(
      `${this.host}/api/dogs?${toSearchParam({
        offset: offset,
        ownerId: ownerId,
      })}`
    ).then((r) => r.json());
  }

  async getDog(id: number): Promise<Dog | undefined> {
    return fetch(`${this.host}/api/dogs/${id}`).then((r) => r.json());
  }

  async getOwner(id: number): Promise<Owner> {
    return fetch(`${this.host}/api/owner/${id}`).then((r) => r.json());
  }

  async getOwners(ids: number[]): Promise<Owner[]> {
    return fetch(
      `${this.host}/api/owner/bulk?${new URLSearchParams(
        ids.map((id) => ["ids", String(id)])
      )}`
    ).then((r) => r.json());
  }
}
